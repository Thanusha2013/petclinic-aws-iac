name: infra-and-deploy

on:
  push:
    branches: [ main ]

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1'}}

      - name: Terraform Init
        working-directory: ./aws-terraform
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: ./aws-terraform
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform apply -auto-approve -var="aws_region=us-east-1"

 - name: Setup Terraform
  uses: hashicorp/setup-terraform@v2
  with:
    terraform_version: 1.5.0

  build-and-deploy:
    name: Build Docker and Deploy to ECR / ECS
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get ECR login
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        run: |
          REPO_URL=$(terraform -chdir=aws-terraform output -raw ecr_repo)
          IMAGE_TAG=latest
          docker build -t ${REPO_URL}:${IMAGE_TAG} .
          docker push ${REPO_URL}:${IMAGE_TAG}

      - name: Force new deployment on ECS service
        run: |
          CLUSTER=$(terraform -chdir=aws-terraform output -raw cluster_name || echo "${{ secrets.CLUSTER_NAME }}")
          SERVICE=$(terraform -chdir=aws-terraform output -raw service_name || echo "${{ secrets.SERVICE_NAME }}")
          aws ecs update-service --cluster ${CLUSTER} --service ${SERVICE} --force-new-deployment
