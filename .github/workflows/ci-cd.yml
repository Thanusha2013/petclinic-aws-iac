name: infra-and-deploy

on:
  push:
    branches: [ main ]

jobs:
  terraform:
    name: Terraform Apply (AWS Infra)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./aws-terraform
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: ./aws-terraform
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_aws_vpc_name: my-vpc
          TF_VAR_public_subnets: '["10.0.1.0/24", "10.0.2.0/24"]'
        run: terraform apply -auto-approve

  build-and-deploy:
    name: Build and Deploy (ECR + ECS)
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS Account ID and Login to ECR
        id: ecr-login
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, Tag, and Push Docker Image
        id: docker-build
        run: |
          # Get ECR repository URI from Terraform output
          REPO_URL=$(terraform -chdir=aws-terraform output -raw ecr_repo || echo "")
          echo "ECR Repository URL: $REPO_URL"

          if [ -z "$REPO_URL" ]; then
            echo "‚ùå ERROR: Terraform output for ecr_repo is empty. Check aws-terraform outputs."
            exit 1
          fi

          # Build the Docker image
          docker build -t myapp:latest .

          # Tag image for ECR
          docker tag myapp:latest $REPO_URL:latest

          # Push to ECR
          docker push $REPO_URL:latest

      - name: Update ECS Service to Use Latest Image
        run: |
          CLUSTER_NAME=$(terraform -chdir=aws-terraform output -raw ecs_cluster_name)
          SERVICE_NAME=$(terraform -chdir=aws-terraform output -raw ecs_service_name)

          echo "Updating ECS Service: $SERVICE_NAME on Cluster: $CLUSTER_NAME"
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
