name: CI-CD-Pipeline

on:
push:
branches:
- main

jobs:
terraform:
name: Terraform Apply
runs-on: ubuntu-latest
steps:
- name: Checkout Code
uses: actions/checkout@v4

```
  - name: Setup Terraform
    uses: hashicorp/setup-terraform@v2
    with:
      terraform_version: 1.8.4

  - name: Configure AWS Credentials
    uses: aws-actions/configure-aws-credentials@v3
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: us-east-1

  - name: Terraform Init
    run: terraform -chdir=aws-terraform init

  - name: Terraform Plan
    run: terraform -chdir=aws-terraform plan

  - name: Terraform Apply
    run: terraform -chdir=aws-terraform apply -auto-approve

  - name: Get ECR Repo URL
    id: ecr_repo
    run: |
      ECR_REPO_URL=$(terraform -chdir=aws-terraform output -raw ecr_repo_url 2>/dev/null | tr -d '\r')
      echo "ECR_REPO_URL=$ECR_REPO_URL"
      echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_ENV
```

build:
name: Build and Push Docker Image
runs-on: ubuntu-latest
needs: terraform
steps:
- name: Checkout Code
uses: actions/checkout@v4

```
  - name: Configure AWS Credentials
    uses: aws-actions/configure-aws-credentials@v3
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: us-east-1

  - name: Login to Amazon ECR
    run: |
      if [ -z "$ECR_REPO_URL" ]; then
        echo "❌ ERROR: ECR_REPO_URL is empty. Check Terraform output or previous step."
        exit 1
      fi
      echo "✅ Logging into Amazon ECR..."
      aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "$ECR_REPO_URL"

  - name: Build Docker Image
    run: |
      echo "Building Docker image..."
      docker build -t spring-petclinic .
      docker tag spring-petclinic:latest "$ECR_REPO_URL:latest"

  - name: Push Docker Image to ECR
    run: |
      echo "Pushing image to ECR..."
      docker push "$ECR_REPO_URL:latest"
```

deploy:
name: Deploy to ECS
runs-on: ubuntu-latest
needs: build
steps:
- name: Checkout Code
uses: actions/checkout@v4

```
  - name: Configure AWS Credentials
    uses: aws-actions/configure-aws-credentials@v3
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: us-east-1

  - name: Update ECS Service
    run: |
      ECS_CLUSTER=$(terraform -chdir=aws-terraform output -raw ecs_cluster_name 2>/dev/null)
      ECS_SERVICE=$(terraform -chdir=aws-terraform output -raw ecs_service_name 2>/dev/null)
      echo "Cluster: $ECS_CLUSTER"
      echo "Service: $ECS_SERVICE"
      aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --force-new-deployment
```
